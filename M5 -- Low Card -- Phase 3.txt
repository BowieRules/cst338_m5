/**
 * Group Assignment for Module 5: GUI "Low Card" Game
 * This is multi-class project to create  your card tools
 * that can be combined with GUI tools to create a GUI program
 * that has real computational power for a GUI card game, "Low Card"
 * 
 * by Cohort 12, Pyrocumulus team:
 * Joshan Dillon, Trenton Fengel, Tabitha Micheels, Marianna Petrovich
 * 
 * 12/1/2020
 * 
 * PHASE 3
 */

import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.event.MouseEvent;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.*;

class Assig5
{

   static int NUM_CARDS_PER_HAND = 7;
   static int NUM_PLAYERS = 2;
   static JLabel[] computerLabels = new JLabel[NUM_CARDS_PER_HAND];
   static JLabel[] humanLabels = new JLabel[NUM_CARDS_PER_HAND];  
   static JLabel[] playedCardLabels  = new JLabel[NUM_PLAYERS]; 
   static JLabel[] playLabelText  = new JLabel[NUM_PLAYERS];
   static JLabel alertLabel = new JLabel("Click card to play", JLabel.CENTER);
   static JLabel scoreLabel = new JLabel("Computer: 0 You: 0", JLabel.CENTER);
   static int myScore = 0, computerScore = 0;

   static Card randomCardGenerator()
   {
      Deck deck = new Deck();
      return deck.inspectCard(deck.rand.nextInt(deck.getNumCards()));
   }
   
   public static void main(String[] args)
   {
      // PHASE 2
      int k;
      Icon tempIcon;
      
      // PHASE 3
      
      int numPacksPerDeck = 1;
      int numJokersPerPack = 2;
      int numUnusedCardsPerPack = 0;
      Card[] unusedCardsPerPack = null;
      
      CardGameFramework LowCardGame = new CardGameFramework(numPacksPerDeck,
            numJokersPerPack, numUnusedCardsPerPack, unusedCardsPerPack,
                        NUM_PLAYERS, NUM_CARDS_PER_HAND);
      LowCardGame.deal();
      
      // Load Icons from GUICard class
      GUICard.loadCardIcons();
      
      // establish main frame in which program will run
      CardTable myCardTable 
         = new CardTable("CardTable", NUM_CARDS_PER_HAND, NUM_PLAYERS);
      myCardTable.setSize(800, 600);
      myCardTable.setLocationRelativeTo(null);
      myCardTable.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
   
      // CREATE LABELS ----------------------------------------------------
      for (k = 0; k < NUM_CARDS_PER_HAND; k++)
      {
         final int thisIndex = k;
         // deal back cards to computer
         computerLabels[k] = new JLabel(GUICard.getBackCardIcon());

         // give human random cards
         humanLabels[k] = new JLabel(GUICard.getIcon(LowCardGame.getHand(1).inspectCard(k)));
         humanLabels[k].addMouseListener(new MouseAdapter() {
            
            public void mouseClicked(MouseEvent me)
            {
               playMyCard(thisIndex);
            }
            
            private void playMyCard(int idx)
            {
               String result = "";
               humanLabels[thisIndex].setVisible(false);
               //play computer's lowest card, it is the first one
               LowCardGame.getHand(0).sort();
               computerLabels[LowCardGame.getHand(0).getNumCards() - 1].setVisible(false);
               // just play the first card = lowest
               Card compCard = LowCardGame.getHand(0).playCard(0);               
               Card myCard = LowCardGame.getHand(1).inspectCard(thisIndex);
              
               // 0 - computer, 1 - human
               // move cards to playing area
               playedCardLabels[0].setIcon(GUICard.getIcon(compCard));
               playedCardLabels[1].setIcon(humanLabels[thisIndex].getIcon());

               playedCardLabels[0].setVisible(true);
               playedCardLabels[1].setVisible(true);

               // who wins this take?
               if (Card.valueToInt(myCard) > Card.valueToInt(compCard))
               {
                  computerScore += 2; // number of cards taken
                  result += "Computer took cards, ";
               }
               else if (Card.valueToInt(myCard) < Card.valueToInt(compCard))
               {
                  myScore += 2;
                  result += "You took cards, ";
               }
               else
               {
                  result += "Tie, noone gets cards, ";
               }
               scoreLabel.setText("Computer: " + computerScore + " You: " + myScore);
            
               // check if game continues
               if (LowCardGame.getHand(0).getNumCards() > 0)
               {
                  result += " select next card.";
               }
               else
               {
                  result += " no more cards, game over. ";
                  if (myScore < computerScore)
                  {
                     result += "You lost this round!";
                  }
                  else if (myScore > computerScore)
                  {
                     result += "You won this round!";
                  }
                  else
                  {
                     result += "This round is tied!";
                  }
               }
               alertLabel.setText(result);
            }
         }); // end of mouse listener

         // deal back cards to computer
         myCardTable.pnlComputerHand.add(computerLabels[k]);

         // give human random cards       
         myCardTable.pnlHumanHand.add(humanLabels[k]);
      }
      
      // and two random cards in the play region (simulating a computer/hum ply)
      playedCardLabels[0] = new JLabel(GUICard.getIcon(randomCardGenerator()));
      playedCardLabels[1] = new JLabel(GUICard.getIcon(randomCardGenerator()));
      playedCardLabels[0].setVisible(false);
      playedCardLabels[1].setVisible(false);
      
      alertLabel.setBackground(new Color(159, 226, 191));
      alertLabel.setOpaque(true); // this is our status message 
      scoreLabel.setBackground(new Color(204, 204, 255));
      scoreLabel.setOpaque(true); // this is our status message 
      myCardTable.pnlPlayArea.add(alertLabel, JLabel.CENTER);
      myCardTable.pnlPlayArea.add(scoreLabel, JLabel.CENTER);
      playLabelText[0] = new JLabel("Computer");
      playLabelText[0].setHorizontalAlignment(JLabel.CENTER);
      playLabelText[1] = new JLabel("You");
      playLabelText[1].setHorizontalAlignment(JLabel.CENTER);
      myCardTable.pnlPlayArea.add(playedCardLabels[0]);
      myCardTable.pnlPlayArea.add(playedCardLabels[1]);
      myCardTable.pnlPlayArea.add(playLabelText[0]);
      myCardTable.pnlPlayArea.add(playLabelText[1]);

      // show everything to the user
      myCardTable.setVisible(true);
   }
}

// This class will control the positioning of the panels and cards of the GUI
class CardTable extends JFrame
{
   static int MAX_CARDS_PER_HAND = 56;
   static int MAX_PLAYERS = 2;  // for now, we only allow 2 person games
   
   private int numCardsPerHand;
   private int numPlayers;

   // members to establish the grid layout for the JPanels
   // one for each hand (player-bottom and computer-top) 
   // and a middle "playing"
   public JPanel pnlComputerHand, pnlHumanHand, pnlPlayArea;
   
   // Constructor to add panels to the JFrame and mutator for members
   CardTable(String title, int numCardsPerHand, int numPlayers)
   {
      // set window title
      super(title);
      
      //Sets values for members
      this.numCardsPerHand = numCardsPerHand;
      this.numPlayers = numPlayers;

      //new BorderLayout manager
      setLayout(new BorderLayout());

      // three panels -- setLayout(new GridLayout(rows, columns));
      TitledBorder border1 = BorderFactory.createTitledBorder("Computer Hand");
      pnlComputerHand = new JPanel(new GridLayout(1, numCardsPerHand));
      pnlComputerHand.setBorder(border1);
      add(pnlComputerHand, BorderLayout.NORTH);
      
      TitledBorder border2 = BorderFactory.createTitledBorder("Your Hand");
      pnlHumanHand = new JPanel(new GridLayout(1, numCardsPerHand));
      pnlHumanHand.setBorder(border2);
      add(pnlHumanHand, BorderLayout.SOUTH);
      
      TitledBorder border3 = BorderFactory.createTitledBorder("Playing Area");
      pnlPlayArea = new JPanel(new GridLayout(3, numPlayers));
      pnlPlayArea.setBorder(border3);
      add(pnlPlayArea, BorderLayout.CENTER);
      
   }

   // Accessors for two private members
   public int getNumCardsPerHand()
   {
      return numCardsPerHand;
   }

   public int getNumPlayers()
   {
      return numPlayers;
   }
}

// Will read the image files and store them in a static Icon array
// 2-D array is used to facilitate addressing the value and suit of a Card
// in order get its Icon
class GUICard
{
   // static GUICard members
   // 14 = A thru K + joker
   private static Icon[][] iconCards = new ImageIcon[14][4];
   private static Icon iconBack;
   static final String IMG_FILEPATH = "images/";
   static final String VALID_SUITS = "CDHS";
   static boolean iconsLoaded = false;

   static void loadCardIcons()
   {
      if (!iconsLoaded)
      {
     
         for (int iValue = 0; iValue < iconCards.length; iValue++)
         {
            for (int iSuit = 0; iSuit < iconCards[iValue].length; iSuit++)
            {
               String filename = turnIntIntoCardValue(iValue) + 
                     turnIntIntoCardSuit(iSuit) + ".gif";
               iconCards[iValue][iSuit] = new ImageIcon(IMG_FILEPATH +
                     filename);
            }
         }
         //create final back card
         iconBack = new ImageIcon("images/BK.gif");
         iconsLoaded = true;
      }
   }

   // turns 0 - 13 into "A", "2", "3", ... "Q", "K", "X"
   static String turnIntIntoCardValue(int k)
   {
      return String.valueOf(Card.valuRanks[k]);
   }
   
   // turns 0 - 3 into "C", "D", "H", "S"
   static String turnIntIntoCardSuit(int j)
   {
      return String.valueOf(VALID_SUITS.charAt(j));
   }

   // Converts value to number in string array
   private static int valueToInt(Card card)
   {
      return Card.valueToInt(card);
   }

   // Converts suit to number in enum
   private static int suitToNum(Card card)
   {
      return Card.Suit.valueOf(card.getSuit().toString()).ordinal();
   }

   public static Icon getIcon(Card card)
   {
      return iconCards[valueToInt(card)][suitToNum(card)];
   }

   public static Icon getBackCardIcon()
   {
      return iconBack;
   }
}

// Represents card in deck of cards
class Card
{
   public enum Suit { clubs, diamonds, hearts, spades };
   public static char[] valuRanks = { 'A', '2', '3', '4', '5', '6', '7', '8',
         '9', 'T', 'J', 'Q', 'K', 'X'};
   private char value;
   private Suit suit;
   private boolean errorFlag = false;

   // Default constructor
   public Card()
   {
      set('A', Suit.spades);
   }

   // Constructor with params
   public Card(char value, Suit suit)
   {
      set(value, suit);
   }
   
   // object as a single string
   public String toString()
   {
      if (errorFlag)
      {
         return "** invalid **";
      }
      else 
      {
         return value + " of " + suit;
      }
   }

   // Mutator for both value and suit,
   // individual mutators not needed
   public boolean set(char value, Suit suit)
   {
      this.value = value;
      this.suit = suit;
      boolean valid = isValid(value, suit);
      errorFlag = (!valid);

      return valid;
   }

   // Accessor
   public char getValue()
   {
      return value;
   }

   public Suit getSuit()
   {
      return suit;
   }

   public boolean getFlag()
   {
      return errorFlag;
   }

   // Returns whether passed card is equal to the original
   public boolean equals(Card card)
   {
      return (this.value == card.getValue()
            && this.errorFlag == card.getFlag()
            && this.suit == card.getSuit());
   }

   // is card of valid value?
   // private only called internally
   private boolean isValid(char value, Suit suit)
   {
      return (new String(valuRanks).indexOf(value) != -1);
   }
   
   // helper for Phase 2
   static int valueToInt(Card card)
   {
      return (new String(valuRanks).indexOf(card.getValue()));
   }
   
   // new method to sort incoming array of cards using bubble sort routine
   static void arraySort(Card[] arrayIn, int arraySize)
   {
      Card tmpCard;

      // Bubble sort algorithm
      for (int iThis = 0; iThis < arraySize - 1; iThis++)
      {
         // Last iThis elements are already in place  
         for (int iNext = 0; iNext < (arraySize - iThis - 1); iNext++)
         {
            if (valueToInt(arrayIn[iNext]) > valueToInt(arrayIn[iNext + 1]))
            {
               tmpCard = arrayIn[iNext];
               arrayIn[iNext] = arrayIn[iNext + 1];
               arrayIn[iNext + 1] = tmpCard;
            } // if
         } // for iNext
      } // for iThis
     
   } //arraySort  
} // class Card

// Represents a hand (array) of numCards cards
class Hand {
   
   public static final int MAX_CARDS = 56;
   private Card[] myCards;
   private int numCards;

   // Default constructor
   public Hand()
   {
      resetHand();
   }

   // new method to sort cards
   public void sort()
   {
      Card.arraySort(myCards, numCards);
   }

   // Remove all cards from the hand
   public void resetHand()
   {
      myCards = new Card[MAX_CARDS];
      numCards = 0;
   }

   // Adds a card to the next available position in collection
   public boolean takeCard(Card card)
   {
      if (numCards > MAX_CARDS)
      {
         return false;
      }      
      else
      {
         // Object copy, not a reference copy
         myCards[numCards] = new Card(card.getValue(), card.getSuit());
         numCards++;
         return true;
      }
   }

   // This method will remove and return the top card in the array
   public Card playCard(int cardIndex)
   {
      // fix >> should check for no more cards in the hand
      // and then do something like return a bad card
      if (numCards > 0)
      {
         //Decreases numCards.
         Card card = myCards[cardIndex];
         
         numCards--;
         for(int i = cardIndex; i < numCards; i++)
         {
            myCards[i] = myCards[i+1];
         }
         
         myCards[numCards] = null;
         
         return card;
      }
      else
      {
         Card invalidCard = new Card();
         invalidCard.set('Z', Card.Suit.spades);
         return invalidCard;
      }
   }

   // Returns the entire hand built up by the Stringizer
   public String toString()
   {
      String strHand = "Hand = ( ";
      for (int i = 0; i < numCards; i++)
      {
         strHand += myCards[i].toString();
         if (i < numCards - 1)
            strHand += ", ";
      }
      strHand += " )";
      return strHand;
   }

   // Accessors
   public int getNumCards()
   {
      return numCards;
   }

   // Returns a card at a given index
   // or a card with errorFlag = true if k is bad
   public Card inspectCard(int k)
   {
      if (k < 0 || k > numCards)
      {
         Card invalidCard = new Card();
         invalidCard.set('Z', Card.Suit.spades);
         return invalidCard;
      }      
      else
      {
         return myCards[k];
      }     
   }
} // class Hand

// Represents the source of all cards numPacks*56
class Deck
{
   // instantiate random object once
   Random rand = new Random(); 
   
   // Final constant (6 packs= 6*56 cards maximum): 
   public static final int DECK_CNT = 56;
   public static final int MAX_CARDS = 6 * DECK_CNT;

   // exactly 52 card reference = all standard cards
   private static Card[] masterPack;
   private int numPacks;
   private Card[] cards; 
   private int topCard; 

   // Main constructor populates the arrays and initial masterpack
   public Deck(int numPacks)
   {
      allocateMasterPack();
      init(numPacks);
   }

   // Overloaded constructor with no params and 1 pack is default 
   public Deck()
   {
      this(1);
   }

   // Re-populates Card array with 56 * numPacks, not masterpack
   void init(int numPacks)
   {
      // 6 is max << fixed from previous version
      if (numPacks <= 6)
      {
         this.topCard = DECK_CNT * numPacks;
         this.cards = new Card[topCard]; 
         this.numPacks = numPacks;
         
         for (int i=0; i < numPacks; i++)
         {
            for (int j=0; j < DECK_CNT; j++)
            {
               this.cards[i * DECK_CNT + j] = new Card(masterPack[j].getValue(),
                     masterPack[j].getSuit());         
            }
         }
      }
   }

   // Mix up the cards with standard random number generator
   public void shuffle()
   {   
      for (int i=0; i < cards.length; i++)
      {
         // generate random integer between 0 and length-1
         int randNum = rand.nextInt(cards.length);

         // Swapping the cards in array with random card
         Card tempCard = cards[randNum];
         cards[randNum] = cards[i]; 
         cards[i] = tempCard; 
      }
   } 
   
   // Returns and removes the top card
   public Card dealCard()
   {
      topCard--;
      // Copy top card
      Card topCardFromDeck = new Card(inspectCard(topCard).getValue(),
            inspectCard(topCard).getSuit());
      // if card is valid remove it from deck
      if (!topCardFromDeck.getFlag())
      {
         cards[topCard] = null;
      }
      return topCardFromDeck;
   }

   // Accessor for topCard
   public int getTopCard()
   {
      return topCard;
   }
   
   // numCards = topCard
   public int getNumCards()
   {
      return topCard;
   }

   // Accessor for a card. Returns a card with errorFlag = true if k is bad. 
   public Card inspectCard(int k)
   {
      if (k < 0 || k > topCard)
      {
         // set to invalid card
         Card badCard = new Card();
         badCard.set('Z', Card.Suit.spades);
         return badCard;
      }
      else
      {
         return cards[k];
      }
   }
   
   // Adds a card to the top of the deck and makes sure that there are
   // not too many instances of the card in the deck
   public boolean addCard(Card card)
   {
      // counter of instances of the card
      int cnt = checkOccurences(card);

      // Should be less than number of packs
      if (cnt >= numPacks)
      {
         System.out.println("Error: too many instances of the card");
         return false;
      }
      else
      {
         // Take added card as a top card
         cards[topCard] = new Card(card.getValue(), card.getSuit());
         topCard++;
         return true;
      }
   }
   
   // helper to count occurences of specific card
   private int checkOccurences(Card card)
   {
   // counter of instances of the card
      int count = 0;

      // inspect all cards for the occurrence
      for (int i = 0; i < topCard; i++)
      {
         if (card.equals(cards[i]))
         {
            count++;
         }
      }
      return count;
   }
   
   // removes specific card from the deck
   // put the current top card into its place
   // if it is not in the deck, return false
   public boolean removeCard(Card card)
   {
      
      int cnt = checkOccurences(card);
      if (cnt == 0)
      {
         return false;
      }
      else
      {
         // Find the card we need to remove
         for (int i = 0; i < topCard; i++)
         {
            if (card.equals(cards[i]))
            {
               // Swap the card with the top card
               cards[i] = cards[topCard - 1];
               cards[topCard - 1] = null;
               topCard--;
            }
         }  
      }
      return true;
   }
   
   // sort cards using Card's bubble sort
   public void sort()
   {
      Card.arraySort(cards, topCard);
   }
   
   // Static Deck object used for copying to another object. Only executes once
   private static void allocateMasterPack()
   {
      // first check if masterpack is not yet built
      if (masterPack == null)
      {
         // counters for loops
         int iValues, iSuits;
   
         // allocate 
         masterPack = new Card[DECK_CNT];
   
         // loop through the suits 
         for (iSuits = 0; iSuits < Card.Suit.values().length; iSuits++)
         {
            // adjusted for jokers, leave space for them
            for (iValues=0; iValues < Card.valuRanks.length; iValues++)
            {
               masterPack[iSuits*(Card.valuRanks.length) + iValues] =
                  new Card(Card.valuRanks[iValues],Card.Suit.values()[iSuits]);
            }  
         }
      }
   }
} // class Deck

//class CardGameFramework  ----------------------------------------------------
class CardGameFramework
{
 private static final int MAX_PLAYERS = 50;

 private int numPlayers;
 private int numPacks;            // # standard 52-card packs per deck
                                  // ignoring jokers or unused cards
 private int numJokersPerPack;    // if 2 per pack & 3 packs per deck, get 6
 private int numUnusedCardsPerPack;  // # cards removed from each pack
 private int numCardsPerHand;        // # cards to deal each player
 private Deck deck;               // holds the initial full deck and gets
                                  // smaller (usually) during play
 private Hand[] hand;             // one Hand for each player
 private Card[] unusedCardsPerPack;   // an array holding the cards not used
                                      // in the game.  e.g. pinochle does not
                                      // use cards 2-8 of any suit

 public CardGameFramework( int numPacks, int numJokersPerPack,
       int numUnusedCardsPerPack,  Card[] unusedCardsPerPack,
       int numPlayers, int numCardsPerHand)
 {
    int k;

    // filter bad values
    if (numPacks < 1 || numPacks > 6)
       numPacks = 1;
    if (numJokersPerPack < 0 || numJokersPerPack > 4)
       numJokersPerPack = 0;
    if (numUnusedCardsPerPack < 0 || numUnusedCardsPerPack > 50) //  > 1 card
       numUnusedCardsPerPack = 0;
    if (numPlayers < 1 || numPlayers > MAX_PLAYERS)
       numPlayers = 4;
    // one of many ways to assure at least one full deal to all players
    if  (numCardsPerHand < 1 ||
          numCardsPerHand >  numPacks * (52 - numUnusedCardsPerPack)
          / numPlayers )
       numCardsPerHand = numPacks * (52 - numUnusedCardsPerPack) / numPlayers;

    // allocate
    this.unusedCardsPerPack = new Card[numUnusedCardsPerPack];
    this.hand = new Hand[numPlayers];
    for (k = 0; k < numPlayers; k++)
       this.hand[k] = new Hand();
    deck = new Deck(numPacks);

    // assign to members
    this.numPacks = numPacks;
    this.numJokersPerPack = numJokersPerPack;
    this.numUnusedCardsPerPack = numUnusedCardsPerPack;
    this.numPlayers = numPlayers;
    this.numCardsPerHand = numCardsPerHand;
    for (k = 0; k < numUnusedCardsPerPack; k++)
       this.unusedCardsPerPack[k] = unusedCardsPerPack[k];

    // prepare deck and shuffle
    newGame();
 }

 // constructor overload/default for game like bridge
 public CardGameFramework()
 {
    this(1, 0, 0, null, 4, 13);
 }

 public Hand getHand(int k)
 {
    // hands start from 0 like arrays

    // on error return automatic empty hand
    if (k < 0 || k >= numPlayers)
       return new Hand();

    return hand[k];
 }

 public Card getCardFromDeck() { return deck.dealCard(); }

 public int getNumCardsRemainingInDeck() { return deck.getNumCards(); }

 public void newGame()
 {
    int k, j;

    // clear the hands
    for (k = 0; k < numPlayers; k++)
       hand[k].resetHand();

    // restock the deck
    deck.init(numPacks);

    // remove unused cards
    for (k = 0; k < numUnusedCardsPerPack; k++)
       deck.removeCard( unusedCardsPerPack[k] );

    // add jokers
    for (k = 0; k < numPacks; k++)
       for ( j = 0; j < numJokersPerPack; j++)
          deck.addCard( new Card('X', Card.Suit.values()[j]) );

    // shuffle the cards
    deck.shuffle();
 }

 public boolean deal()
 {
    // returns false if not enough cards, but deals what it can
    int k, j;
    boolean enoughCards;

    // clear all hands
    for (j = 0; j < numPlayers; j++)
       hand[j].resetHand();

    enoughCards = true;
    for (k = 0; k < numCardsPerHand && enoughCards ; k++)
    {
       for (j = 0; j < numPlayers; j++)
          if (deck.getNumCards() > 0)
             hand[j].takeCard( deck.dealCard() );
          else
          {
             enoughCards = false;
             break;
          }
    }

    return enoughCards;
 }

 void sortHands()
 {
    int k;

    for (k = 0; k < numPlayers; k++)
       hand[k].sort();
 }

 Card playCard(int playerIndex, int cardIndex)
 {
    // returns bad card if either argument is bad
    if (playerIndex < 0 ||  playerIndex > numPlayers - 1 ||
        cardIndex < 0 || cardIndex > numCardsPerHand - 1)
    {
       //Creates a card that does not work
       return new Card('M', Card.Suit.spades);      
    }
    // return the card played
    return hand[playerIndex].playCard(cardIndex);
 }

 boolean takeCard(int playerIndex)
 {
    // returns false if either argument is bad
    if (playerIndex < 0 || playerIndex > numPlayers - 1)
       return false;
   
     // Are there enough Cards?
     if (deck.getNumCards() <= 0)
        return false;

     return hand[playerIndex].takeCard(deck.dealCard());
  }
}